{"version":3,"sources":["assets/svg/articles.svg","assets/svg/books.svg","assets/svg/membership.svg","serviceWorker.ts","store/article/types.ts","store/article/reducer.ts","utils/axios.ts","api/article.ts","store/article/action.ts","store/article/saga.ts","store/index.ts","pages/components/Header.tsx","pages/home/components/ListItem.tsx","pages/home/components/GitItem.tsx","pages/home/Home.tsx","pages/detail/Detail.tsx","pages/article/components/ArticleListItem.tsx","pages/article/Articles.tsx","pages/about/About.tsx","pages/components/Footer.tsx","pages/Routes.tsx","Main.tsx","index.tsx","configureStore.ts","assets/img/avatar.jpg"],"names":["module","exports","Boolean","window","location","hostname","match","FETCH_REQUEST","FETCH_SUCCESS","FETCH_ERROR","SAVE_ARTICLE","initState","data","page","totalPage","loading","error","undefined","savedData","articleReducer","state","action","type","concat","payload","message","Axios","defaults","withCredentials","transformRequest","Qs","stringify","baseURL","fetchArticles","limit","get","params","fetchArticle","id","md","fetchRequest","fetchError","getArticles","watchFetchRequest","saga","call","res","items","totalCount","Math","ceil","put","errorResult","Error","stack","takeEvery","all","fork","rootSaga","createRootReducer","history","combineReducers","article","router","connectRouter","articleSaga","Header","props","className","to","src","books","alt","membership","ListItem","avatar","createdAt","replace","_id","title","summary","aria-hidden","xlinkHref","commentCount","category","name","GitItem","Home","this","length","reverse","slice","map","item","key","Component","mapDispatch","connect","Detail","pathname","split","setState","push","Avatar","dangerouslySetInnerHTML","__html","content","ArticleListItem","viewsCount","ArticlePage","handleClick","a","showMore","delay","onClick","About","Footer","href","Routes","path","component","Articles","from","Main","store","initialState","INITIAL_REDUX_STATE","createBrowserHistory","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25f55503.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/articles.d3813e85.svg\";","module.exports = __webpack_public_path__ + \"static/media/books.ee127b99.svg\";","module.exports = __webpack_public_path__ + \"static/media/membership.ddbc7eaf.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action } from 'redux'\n\nexport interface Article {\n  readonly _id: string\n  readonly title: string\n  readonly content: string\n  readonly summary: string\n  readonly category: Category\n  readonly viewsCount: number\n  readonly commentCount: number\n  readonly createdAt: string\n  readonly updatedAt: string\n  readonly prev?: {\n    _id: string\n    title: string\n  }\n  readonly next?: {\n    _id: string\n    title: string\n  }\n}\n\nexport interface Category {\n  readonly _id: string\n  readonly name: string\n  readonly articleCount: number\n  readonly createdAt: string\n  readonly updatedAt: string\n}\n\nexport interface ArticleState {\n  data: Article[]\n  page: number\n  totalPage: number\n  loading: boolean\n  error?: any\n  savedData?: Article[]\n}\n\nexport const FETCH_REQUEST = 'FETCH_REQUEST'\nexport type FETCH_REQUEST = typeof FETCH_REQUEST\n\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS'\nexport type FETCH_SUCCESS = typeof FETCH_SUCCESS\n\nexport const FETCH_ERROR = 'FETCH_ERROR'\nexport type FETCH_ERROR = typeof FETCH_ERROR\n\nexport const SAVE_ARTICLE = 'SAVE_ARTICLE'\nexport type SAVE_ARTICLE = typeof SAVE_ARTICLE\n\nexport interface fetchRequestAction extends Action {\n  type: FETCH_REQUEST\n  payload?: {\n    page?: number\n  }\n}\n\nexport interface fetchSuccessAction extends Action {\n  type: FETCH_SUCCESS\n  payload: {\n    data: Article[]\n    totalPage: number\n    page: number\n  }\n}\n\nexport interface fetchErrorAction extends Action {\n  type: FETCH_ERROR\n  message: string\n}\n\nexport interface saveArticleAction extends Action {\n  type: SAVE_ARTICLE\n  payload: Article\n}\n\nexport type ArticleAction = fetchRequestAction | fetchSuccessAction | fetchErrorAction | saveArticleAction\n","import { ArticleAction, ArticleState, FETCH_REQUEST, FETCH_SUCCESS, FETCH_ERROR, SAVE_ARTICLE } from './types'\nimport { Reducer } from 'redux'\n\n// 初始状态\nconst initState: ArticleState = {\n  data: [],\n  page: 1,\n  totalPage: 0,\n  loading: false,\n  error: undefined,\n  savedData: []\n}\n\nconst articleReducer: Reducer<ArticleState, ArticleAction> = (state = initState, action) => {\n  switch (action.type) {\n    case FETCH_REQUEST:\n      // 发送请求,将 loading 状态设置为 true\n      return { ...state, loading: true }\n    case FETCH_SUCCESS:\n      // 请求成功,将 loading 状态设置为 false,同时使用从服务器中返回的数据更新 state\n      return {\n        ...state,\n        loading: false,\n        data: state.data.concat(action.payload.data),\n        totalPage: action.payload.totalPage,\n        page: action.payload.page\n      }\n    case FETCH_ERROR:\n      // 请求失败,将 loading 状态设置为 false,同时把错误信息更新到 state 上\n      return { ...state, error: action.message, loading: false }\n    case SAVE_ARTICLE:\n      let data = state.savedData!.concat(action.payload)\n      return { ...state, savedData: data }\n    default:\n      return state\n  }\n}\n\nexport default articleReducer\n","import Axios from 'axios'\n import Qs from 'qs'\nconst ENV = process.env.NODE_ENV\n\n// 开发环境使用本地后台搭建的服务器\nAxios.defaults.withCredentials = true\nAxios.defaults.transformRequest = (data = {}) => {\n  return Qs.stringify(data)\n}\nAxios.defaults.baseURL = ENV === 'development' ? 'http://0.0.0.0:2300' : ''\n\nexport default Axios\n","import Axios from '../utils/axios'\n\nexport interface queryDataType {\n  page?: number\n  limit?: number\n}\n\n// 获取所有文章 page:当前请求数据在服务器中的页数 limit:每次发送请求一共请求多少数据\nexport const fetchArticles = ({ page, limit }: queryDataType) => {\n  return Axios.get('/api/articles', {\n    params: {\n      page,\n      limit\n    }\n  })\n}\n\nexport const fetchArticle = (id: string, md = true) =>\n  Axios.get(`/api/article/${id}`, {\n    params: {\n      md\n    }\n  })\n","import { ArticleAction, FETCH_SUCCESS, FETCH_ERROR, SAVE_ARTICLE, Article, fetchRequestAction } from './types'\n\n// 发送请求,向 reducer 传递正在发送请求这一消息,把 state设置为 true 改为 true\nexport function fetchRequest(action: fetchRequestAction): ArticleAction {\n  const { type, payload } = action\n  return {\n    type,\n    payload\n  }\n}\n\n// 请求成功,向 reducer 传递请求成功后返回的数据\nexport function fetchSuccess(data: any): ArticleAction {\n  return {\n    type: FETCH_SUCCESS,\n    payload: data\n  }\n}\n\n// 请求失败向 reducer 传递失败的错误信息\nexport function fetchError(message: string): ArticleAction {\n  return {\n    type: FETCH_ERROR,\n    message\n  }\n}\n\n// 每次请求对应的文章,把请求的结果存储到 redux 中,使下次查看同一篇文章时不需要再次获取数据\nexport function saveArticle(data: Article): ArticleAction {\n  return {\n    type: SAVE_ARTICLE,\n    payload: data\n  }\n}\n","import { call, all, fork, put, takeEvery } from 'redux-saga/effects'\nimport { FETCH_REQUEST, fetchRequestAction } from './types'\nimport { fetchArticles } from '../../api/article'\nimport { fetchError, fetchSuccess } from './action'\n\nfunction* getArticles(action: fetchRequestAction) {\n  try {\n    // 如果派发 action 时没有传入 payload,则使用默认数据,否则使用传入的数据\n    const { page } = action.payload ? action.payload : { page: 1 }\n    const limit = 10\n    // 使用从 action 中结构出来的page,limit,调用 fetchArticles 方法向服务器发送请求\n    const res = yield call(fetchArticles, { page, limit })\n    let { items, totalCount } = res.data.data\n    const totalPage = Math.ceil(totalCount / limit)\n    res.error ? yield put(fetchError(res.error)) : yield put(fetchSuccess({ data: items, totalPage, page }))\n  } catch (e) {\n    let errorResult = e instanceof Error && e.stack ? e.stack : '不知名错误'\n    yield put(fetchError(errorResult))\n  }\n}\n\n// takeEvery方法监听从界面 带有FETCH_REQUEST的 action,从中调用 getArticles 方法\nfunction* watchFetchRequest() {\n  yield takeEvery(FETCH_REQUEST, getArticles)\n}\n\nexport default function* saga() {\n  yield all([fork(watchFetchRequest)])\n}\n","import { connectRouter,RouterState } from 'connected-react-router'\nimport { combineReducers } from 'redux'\nimport { History } from 'history'\nimport {all,fork} from 'redux-saga/effects'\n// 导入各个文件的 reducer saga,状态类型\nimport articleReducer from './article/reducer';\nimport articleSaga from './article/saga';\nimport {ArticleState} from './article/types'\nexport interface ApplicationState {\n  article: ArticleState\n  router: RouterState\n}\n\n// rootReducer 创建函数\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    article: articleReducer,\n    router: connectRouter(history)\n  })\n\n// 创建 rootSaga\nexport function* rootSaga() {\n  yield all([fork(articleSaga)])\n}\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport article from '../../assets/svg/articles.svg'\nimport books from '../../assets/svg/books.svg'\nimport membership from '../../assets/svg/membership.svg'\n\n// import './index.scss'\nimport './index.scss'\n\ninterface IProps {\n  text?: string\n}\n\nconst Header: React.FC<IProps> = props => {\n  return (\n    <div className=\"header-wrapper\">\n      <h1 className=\"logo\">Feng`s Blog</h1>\n      <div className=\"header-content\">\n        <div className=\"header-content-nav\">\n          <ul className=\"header-content-nav-link\">\n            <li className=\"home\">\n              <NavLink to=\"/home\">\n                <div className=\"img\">\n                  <img src={books} alt=\"\" />\n                </div>\n\n                <div className=\"title\">HOME</div>\n\n                <div className=\"desc\"> all the news showing </div>\n              </NavLink>\n            </li>\n            <li className=\"article\">\n              <NavLink to=\"/article\">\n                <div className=\"img\">\n                  <img src={article} alt=\"\" />\n                </div>\n                <div className=\"title\"> ARTICLE</div>\n                <div className=\"desc\">Development & some thought</div>\n              </NavLink>\n            </li>\n            <li className=\"about\">\n              <NavLink to=\"/about\">\n                <div className=\"img\">\n                  <img src={membership} alt=\"\" />\n                </div>\n                <div className=\"title\">ABOUT</div>\n                <div className=\"desc\">knowing more about me</div>\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport avatar from '../../../assets/img/avatar.jpg'\nimport { Article } from '../../../store/article/types'\nimport { Link } from 'react-router-dom'\n\ninterface Props {\n  data: Article\n}\n\nconst ListItem: React.FC<Props> = ({ data }) => {\n  return (\n    <div className=\"article-list-item\">\n      <div className=\"article-header\">\n        <div className=\"article-header-img\">\n          <img src={avatar} alt=\"\" />\n        </div>\n        <span className=\"article-header-time\">{data.createdAt.replace(/[TZ]/gi, ' ').replace(/\\.\\d+/, '')}</span>\n      </div>\n      <div className=\"article-content\">\n        <Link to={`/detail/${data._id}`}>\n          <h2 className=\"article-content-title\">{data.title}</h2>\n        </Link>\n        <p className=\"article-content-summary\">{data.summary}</p>\n      </div>\n      <div className=\"article-info\">\n        <div className=\"comment\">\n          <svg className=\"icon\" aria-hidden=\"true\">\n            <use xlinkHref=\"#icon-message-detail\"></use>\n          </svg>\n          <div className=\"comment-count\">{data.commentCount}</div>\n        </div>\n        <div className=\"category\">\n          <svg className=\"icon\" aria-hidden=\"true\">\n            <use xlinkHref=\"#icon-category_find_icon\"></use>\n          </svg>\n          <div className=\"category-name\">{data.category.name}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ListItem\n","import React from 'react'\n\ninterface Props {}\n\nconst GitItem: React.FC<Props> = () => {\n  return <div className=\"git-list-item\">All things are difficult before they are easy.</div>\n}\n\nexport default GitItem\n","// 第三方库\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router-dom'\nimport QueueAnim from 'rc-queue-anim'\n\n// 内部组件\nimport ListItem from './components/ListItem'\nimport GitItem from './components/GitItem'\n\n// 内部常量或方法\nimport { ApplicationState } from '../../store/index'\nimport { Article, FETCH_REQUEST } from '../../store/article/types'\nimport { fetchRequest } from '../../store/article/action'\n\n// 样式文件\nimport './index.scss'\n\ntype PropFromMap = {\n  data: Article[]\n  loading: boolean\n}\n\ntype PropFromDispatch = {\n  fetchRequest: typeof fetchRequest\n}\n\ntype IState = {\n  loading: boolean\n}\ntype ComponentProps = PropFromDispatch & RouteComponentProps & PropFromMap\nclass Home extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      loading: this.props.loading\n    }\n  }\n\n  async componentDidMount() {\n    await this.props.fetchRequest({\n      type: FETCH_REQUEST,\n      payload: {\n        page: 1\n      }\n    })\n  }\n\n  render() {\n    if (!this.state.loading && this.props.data.length !== 0) {\n      return (\n        <div className=\"home-wrapper\">\n          <section className=\"introduction\">\n            <div className=\"introduction-wrapper\">\n              <p className=\"title\">HI,WELCOME TO MY BLOG</p>\n              <p>\n                MY,NAME IS <span className=\"name\">范剑峰</span>\n              </p>\n              <p>I'AM A beginner OF FRONT-END Developing</p>\n            </div>\n          </section>\n          <div className=\"article-list\">\n            {this.props.data\n              .reverse()\n              .slice(0, 4)\n              .map(item => (\n                <ListItem data={item} key={item._id} />\n              ))}\n          </div>\n          <div className=\"git-list\">\n            <GitItem />\n            <div className=\"say\">\n              <div>STAY HUNGRY, STAY FOOLISH</div>\n            </div>\n          </div>\n        </div>\n      )\n    } else {\n      return ''\n    }\n  }\n}\n\nconst mapState = ({ article }: ApplicationState) => {\n  return {\n    data: article.data,\n    loading: article.loading\n  }\n}\n\nconst mapDispatch = {\n  fetchRequest\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(Home)\n","import React, { Component } from 'react'\nimport Avatar from '../../assets/img/avatar.jpg'\nimport './index.scss'\nimport { Article } from '../../store/article/types'\nimport { connect } from 'react-redux'\nimport { fetchArticle } from '../../api/article'\nimport { RouteComponentProps } from 'react-router-dom'\n\ninterface IProps {}\n\ninterface IState {\n  data?: Article\n  loading: boolean\n}\n\ntype ComponentProps = IProps & RouteComponentProps\n\nclass Detail extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      data: undefined,\n      loading: true\n    }\n  }\n\n  async componentDidMount() {\n    // 从浏览器地址获取当前文章的 ID,根据 ID 向服务器请求对应的数据\n    let id = this.props.history.location.pathname.split('detail/')[1]\n    let res = await fetchArticle(id)\n    if (res.data.data !== null) {\n      this.setState({\n        loading: false,\n        data: res.data.data\n      })\n    } else {\n      this.setState({ loading: false })\n      this.props.history.push('/')\n    }\n  }\n\n  render() {\n    if (this.state.data) {\n      return (\n        <div className=\"detail-wrapper\">\n          <aside className=\"detail-author-info\">\n            <div className=\"avatar-wrapper\">\n              <img src={Avatar} alt=\"\" />\n            </div>\n            <h3> about me</h3>\n            <article>我是一个自学者,也是一个初学者,目标是成为一个专业的前端工程师</article>\n          </aside>\n          <section className=\"detail-content\">\n            <p className=\"detail-content-time\">{this.state.data.createdAt}</p>\n            <p className=\"category\">\n              <svg className=\"icon\" aria-hidden=\"true\">\n                <use xlinkHref=\"#icon-category_find_icon\"></use>\n              </svg>\n              <span className=\"category-name\">{this.state.data.category.name}</span>\n            </p>\n            <h2 className=\"detail-content-title\">{this.state.data.title}</h2>\n            <hr />\n            <div className=\"markdown-body\" dangerouslySetInnerHTML={{ __html: this.state.data.content }}></div>\n          </section>\n        </div>\n      )\n    } else {\n      return ''\n    }\n  }\n}\n\nexport default Detail\n","import React from 'react'\nimport { Article } from '../../../store/article/types'\nimport { Link } from 'react-router-dom'\n\ninterface IProps {\n  data: Article\n}\n\nconst ArticleListItem: React.FC<IProps> = ({ data }) => {\n  return (\n    <section className=\"articles-list-item\">\n      <Link to={`/detail/${data._id}`}>\n        <h2 className=\"list-item-title\">{data.title}</h2>\n      </Link>\n      <span className=\"list-item-time\">{data.createdAt.replace(/[tz]/gi, ' ').replace(/\\.\\d+/, '')}</span>\n      <p className=\"list-item-summary\">{data.summary}</p>\n      <span className=\"list-item-category\">分类:{data.category.name}</span> <br />\n      <span className=\"list-item-view-count\">观看:{data.viewsCount}</span>\n      <br />\n      <span className=\"list-item-comment-count\">评论:{data.commentCount}</span>\n      <br />\n    </section>\n  )\n}\n\nexport default ArticleListItem\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router-dom'\nimport QueueAnim from 'rc-queue-anim'\n\nimport { ApplicationState } from '../../store/index'\nimport ArticleListItem from './components/ArticleListItem'\nimport { Article, FETCH_REQUEST } from '../../store/article/types'\nimport { fetchRequest } from '../../store/article/action'\nimport './index.scss'\n\ntype PropFromMap = {\n  data: Article[]\n  loading: boolean\n  totalPage: number\n  page: number\n}\n\ntype IState = {\n  showMore: boolean\n}\n\ntype PropFromDispatch = {\n  fetchRequest: typeof fetchRequest\n}\ntype ComponentProps = PropFromDispatch & RouteComponentProps & PropFromMap\n\nclass ArticlePage extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    // 设置点击加载更多数据使用到状态\n    this.state = {\n      showMore: true\n    }\n  }\n\n  // 当用户进入页面,组件加载完毕后,派发获取信息行为\n  async componentDidMount() {\n    const { data } = this.props\n    if (!data || data.length === 0) {\n      await this.props.fetchRequest({\n        type: FETCH_REQUEST\n      })\n    }\n  }\n\n  render() {\n    const { data, loading } = this.props\n    const { showMore } = this.state\n    if (data && data.length !== 0) {\n      return (\n        <section className=\"articles-wrapper\">\n          <QueueAnim delay={1000} className=\"queue-simple\">\n            {data.map(item => (\n              <ArticleListItem data={item} key={item._id} />\n            ))}\n          </QueueAnim>\n\n          {showMore ? (\n            <div className=\"loading\" onClick={this.handleClick}>\n              {loading ? (\n                <svg className=\"icon\" aria-hidden=\"true\">\n                  <use xlinkHref=\"#icon-loading\"></use>\n                </svg>\n              ) : (\n                '加载更多'\n              )}\n            </div>\n          ) : (\n            ''\n          )}\n        </section>\n      )\n    }\n    return ''\n  }\n\n  handleClick = async () => {\n    const { totalPage, page, fetchRequest } = this.props\n    await fetchRequest({\n      type: FETCH_REQUEST,\n      payload: {\n        page: page + 1\n      }\n    })\n    // 如果当前数据所在页数大于等于服务器上的总数,说明服务器上已经没有数据,此时不需要显示加载更多按钮\n    if (totalPage <= page) {\n      this.setState({\n        showMore: false\n      })\n    }\n  }\n}\n\nconst mapState = ({ article }: ApplicationState) => {\n  return {\n    data: article.data,\n    loading: article.loading,\n    totalPage: article.totalPage,\n    page: article.page\n  }\n}\n\nconst mapDispatch = {\n  fetchRequest\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(ArticlePage)\n","import React from 'react'\n\ninterface Props {\n  \n}\n\n const About: React.FC<Props> = () => {\n  return (\n    <div>\n      helloworld\n    </div>\n  )\n}\n\nexport default About","import React from 'react'\n\ninterface Props {}\n\nconst Footer: React.FC<Props> = () => {\n  return (\n    <div className=\"footer-wrapper\">\n      <a href=\"http://www.beian.miit.gov.cn/\">\n        <span>© 2019 眼前有条河 </span>{' '}\n        <span>\n          {' '}\n          <i></i> 粤ICP备19139935号\n        </span>\n      </a>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { Route, Switch, Redirect } from 'react-router-dom'\n\nimport { History } from 'history'\n\nimport Header from './components/Header'\nimport Home from './home/Home'\nimport Detail from './detail/Detail'\nimport Articles from './article/Articles'\nimport About from './about/About'\nimport Footer from './components/Footer'\n\ninterface IProps {\n  history: History\n}\n\nconst Routes: React.FC<IProps> = ({ history }) => {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route path=\"/home\" component={Home} />\n        <Route path=\"/detail/:id\" component={Detail} />\n        <Route path=\"/article\" component={Articles} />\n        <Route path=\"/about\" component={About} />\n        <Redirect from=\"/\" to=\"/home\" />\n      </Switch>\n      <Footer />\n    </>\n  )\n}\n\nexport default Routes\n","import React from 'react';\nimport {Store} from 'redux';\nimport { ApplicationState } from './store';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport {History} from 'history'\nimport Routes from './pages/Routes';\n\n// Main 组件需要传入的属性分别为由 redux 创建的 store,由浏览器历史 history\ninterface MainProps {\n  store: Store<ApplicationState>\n  history:History\n}\n\nconst Main: React.FC<MainProps> = ({ store, history }) => {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Routes history={history}/>\n      </ConnectedRouter>\n   </Provider>\n  );\n}\n\nexport default Main;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createBrowserHistory } from 'history'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './configureStore'\nimport Main from './Main'\nimport { History } from 'history'\n\nimport './index.scss';\n\nconst initialState = window.INITIAL_REDUX_STATE\n\n// tslint:disable-next-line\nconst history: History = createBrowserHistory()\nconst store = configureStore(history, initialState)\n\nReactDOM.render(<Main store={store} history={history} />, document.getElementById('root'))\nserviceWorker.unregister()\n","import { Store, createStore, applyMiddleware, compose } from 'redux'\nimport  createSagaMiddleware  from 'redux-saga'\n// 使用 使用 router-middle-ware 把浏览器 history 挂载到 redux 容器上\nimport { routerMiddleware } from 'connected-react-router'\n// 指明传递给 configureStore 的 history 参数为 History 类型\nimport { History } from 'history'\n// 导入状态接口,以及经过联合后的 reducers/sagas\nimport { createRootReducer, rootSaga,ApplicationState } from './store'\n\n\nexport default function configureStore(history: History,initialState: ApplicationState): Store<ApplicationState> {\n  // 创建saga 中间件\n  const sagaMiddleware = createSagaMiddleware()\n  // 使用 rootReducer/rootSaga,创建 store, 容器的初始状态(initialState)会在应用的入口传入\n  const store = createStore(\n    createRootReducer(history),\n    initialState,\n    compose(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n  )\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n","module.exports = __webpack_public_path__ + \"static/media/avatar.75814896.jpg\";"],"sourceRoot":""}