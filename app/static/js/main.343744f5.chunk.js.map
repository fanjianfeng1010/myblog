{"version":3,"sources":["assets/img/avatar.jpg","assets/svg/articles.svg","assets/svg/books.svg","assets/svg/membership.svg","serviceWorker.ts","store/article/types.ts","store/article/reducer.ts","utils/axios.ts","api/article.ts","store/article/action.ts","store/article/saga.ts","store/index.ts","pages/home/components/ListItem.tsx","pages/home/components/GitItem.tsx","pages/home/Home.tsx","pages/components/Header.tsx","pages/detail/Detail.tsx","pages/article/components/ArticleListItem.tsx","pages/article/Articles.tsx","pages/about/About.tsx","pages/Routes.tsx","Main.tsx","index.tsx","configureStore.ts"],"names":["module","exports","Boolean","window","location","hostname","match","FETCH_REQUEST","FETCH_SUCCESS","FETCH_ERROR","SAVE_ARTICLE","initState","data","loading","error","undefined","savedData","articleReducer","state","action","type","payload","message","concat","Axios","defaults","withCredentials","transformRequest","Qs","stringify","baseURL","fetchArticles","page","limit","get","params","fetchArticle","id","md","fetchRequest","fetchError","getArticles","watchFetchRequest","saga","call","res","put","items","errorResult","Error","stack","takeEvery","all","fork","rootSaga","createRootReducer","history","combineReducers","article","router","connectRouter","articleSaga","ListItem","className","src","avatar","alt","createdAt","replace","to","_id","title","summary","aria-hidden","xlinkHref","commentCount","category","name","GitItem","Home","props","this","length","slice","map","item","key","Component","mapDispatch","connect","Header","books","membership","Detail","pathname","split","setState","push","Avatar","dangerouslySetInnerHTML","__html","content","ArticleListItem","Article","About","Routes","path","component","Articles","from","Main","store","initialState","INITIAL_REDUX_STATE","createBrowserHistory","sagaMiddleware","createSagaMiddleware","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.343744f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.75814896.jpg\";","module.exports = __webpack_public_path__ + \"static/media/articles.d3813e85.svg\";","module.exports = __webpack_public_path__ + \"static/media/books.ee127b99.svg\";","module.exports = __webpack_public_path__ + \"static/media/membership.ddbc7eaf.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Action } from 'redux'\n\nexport interface Article {\n  readonly _id: string\n  readonly title:string\n  readonly content: string\n  readonly summary: string\n  readonly category: Category\n  readonly viewCount: number\n  readonly commentCount:number\n  readonly createdAt: string\n  readonly updatedAt: string\n  readonly prev?: {\n    _id: string\n    title:string\n  }\n  readonly next?: {\n  _id: string\n  title:string\n  }\n}\n\nexport interface Category {\n  readonly _id: string\n  readonly name: string\n  readonly articleCount: number\n  readonly createdAt: string\n  readonly updatedAt: string\n}\n\nexport interface ArticleState {\n  data: Article[]\n  loading: boolean\n  error?: any\n  savedData?:Article[]\n}\n\nexport const FETCH_REQUEST = 'FETCH_REQUEST'\nexport type FETCH_REQUEST = typeof FETCH_REQUEST\n\n\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS'\nexport type FETCH_SUCCESS = typeof FETCH_SUCCESS\n\nexport const FETCH_ERROR = 'FETCH_ERROR'\nexport type FETCH_ERROR = typeof FETCH_ERROR\n\nexport const SAVE_ARTICLE = 'SAVE_ARTICLE'\nexport type SAVE_ARTICLE = typeof SAVE_ARTICLE\n\nexport interface fetchRequestAction extends Action {\n  type: FETCH_REQUEST\n  payload: {\n    page: number\n    limit:number\n  }\n}\n\nexport interface fetchSuccessAction extends Action {\n  type: FETCH_SUCCESS\n  payload: Article[]\n}\n\nexport interface fetchErrorAction extends Action {\n  type: FETCH_ERROR\n  message: string\n}\n\nexport interface saveArticleAction extends Action{\n  type: SAVE_ARTICLE\n  payload:Article\n}\n\nexport type ArticleAction = fetchRequestAction | fetchSuccessAction | fetchErrorAction |saveArticleAction\n\n","import { ArticleAction, ArticleState, FETCH_REQUEST, FETCH_SUCCESS, FETCH_ERROR, SAVE_ARTICLE } from './types'\nimport { Reducer } from 'redux';\n\n// 初始状态\nconst initState: ArticleState = {\n  data: [],\n  loading: false,\n  error: undefined,\n  savedData:[]\n} \n\nconst  articleReducer: Reducer<ArticleState, ArticleAction> = (state= initState, action) => {\n  switch (action.type) {\n    case FETCH_REQUEST:\n      // 发送请求,将 loading 状态设置为 true\n      return {...state,loading:true}\n    case FETCH_SUCCESS:\n      // 请求成功,将 loading 状态设置为 false,同时使用从服务器中返回的数据更新 state\n\n      return {...state,loading:false,data:action.payload}\n    case FETCH_ERROR:\n      // 请求失败,将 loading 状态设置为 false,同时把错误信息更新到 state 上\n      return { ...state, error: action.message, loading: false }\n    case SAVE_ARTICLE:\n      let data = state.savedData!.concat(action.payload)\n      return {...state,savedData:data}\n    default:\n     return state\n  }\n}\n\nexport default articleReducer","import Axios from 'axios'\n import Qs from 'qs'\nconst ENV = process.env.NODE_ENV\n\n// 开发环境使用本地后台搭建的服务器\nAxios.defaults.withCredentials = true\nAxios.defaults.transformRequest = (data = {}) => {\n  return Qs.stringify(data)\n}\nAxios.defaults.baseURL = ENV === 'development' ? 'http://0.0.0.0:2300' : ''\n\nexport default Axios\n","import Axios from '../utils/axios';\n\ninterface queryDataType {\n  page: number,\n  limit:number,\n}\n\n// 获取所有文章 page:当前请求数据在服务器中的页数 limit:每次发送请求一共请求多少数据\nexport const fetchArticles = ({page=1,limit=10}:queryDataType) => {\n  return Axios.get('/api/articles', {\n    params: {\n      page,limit\n    }\n  })\n}\n\nexport const fetchArticle = (id: string,md=true) => Axios.get(`/api/article/${id}`, {\n  params: {\n    md\n  }\n})","import { ArticleAction, FETCH_REQUEST, FETCH_SUCCESS, FETCH_ERROR,SAVE_ARTICLE,Article, fetchRequestAction } from './types'\n\n// 发送请求,向 reducer 传递正在发送请求这一消息,把 state设置为 true 改为 true\nexport function fetchRequest(action:fetchRequestAction): ArticleAction {\n  return {\n    type: FETCH_REQUEST,\n    payload:action.payload\n  }\n}\n\n// 请求成功,向 reducer 传递请求成功后返回的数据\nexport function fetchSuccess(data:any): ArticleAction {\n  return {\n    type: FETCH_SUCCESS,\n    payload: data\n  }\n}\n\n// 请求失败向 reducer 传递失败的错误信息\nexport function fetchError(message:string): ArticleAction {\n  return {\n    type: FETCH_ERROR,\n    message\n  }\n}\n\n\n// 每次请求对应的文章,把请求的结果存储到 redux 中,使下次查看同一篇文章时不需要再次获取数据\nexport function saveArticle(data: Article): ArticleAction {\n  return {\n    type: SAVE_ARTICLE,\n    payload:data\n  }\n}","import { call, all, fork, put, takeEvery } from 'redux-saga/effects'\nimport { FETCH_REQUEST, fetchRequestAction } from './types'\nimport { fetchArticles } from '../../api/article'\nimport { fetchError, fetchSuccess } from './action'\n\n\nfunction* getArticles(action:fetchRequestAction) {\n  try {\n    const { payload: { page, limit } } = action\n    const res = yield call(fetchArticles, { page, limit })\n    \n    res.error ? yield put(fetchError(res.error)) : yield put(fetchSuccess(res.data.data.items))\n  } catch (e) {\n    \n    let errorResult = e instanceof Error && e.stack ? e.stack : '不知名错误'\n    yield put(fetchError(errorResult))\n  }\n}\n\nfunction* watchFetchRequest() {\n  yield takeEvery(FETCH_REQUEST, getArticles)\n}\n\nexport default function* saga() {\n  yield all([fork(watchFetchRequest)])\n}\n","import { connectRouter,RouterState } from 'connected-react-router'\nimport { combineReducers } from 'redux'\nimport { History } from 'history'\nimport {all,fork} from 'redux-saga/effects'\n// 导入各个文件的 reducer saga,状态类型\nimport articleReducer from './article/reducer';\nimport articleSaga from './article/saga';\nimport {ArticleState} from './article/types'\nexport interface ApplicationState {\n  article: ArticleState\n  router: RouterState\n}\n\n// rootReducer 创建函数\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    article: articleReducer,\n    router: connectRouter(history)\n  })\n\n// 创建 rootSaga\nexport function* rootSaga() {\n  yield all([fork(articleSaga)])\n}\n","import React from 'react'\nimport avatar from '../../../assets/img/avatar.jpg'\nimport { Article } from '../../../store/article/types'\nimport { Link } from 'react-router-dom'\n\ninterface Props {\n  data: Article\n}\n\nconst ListItem: React.FC<Props> = ({ data }) => {\n  return (\n    <div className=\"article-list-item\">\n      <div className=\"article-header\">\n        <div className=\"article-header-img\">\n          <img src={avatar} alt=\"\" />\n        </div>\n        <span className=\"article-header-time\">{data.createdAt.replace(/[TZ]/gi, ' ').replace(/\\.\\d+/, '')}</span>\n      </div>\n      <div className=\"article-content\">\n        <Link to={`/detail/${data._id}`}>\n          <h2 className=\"article-content-title\">{data.title}</h2>\n        </Link>\n        <p className=\"article-content-summary\">{data.summary}</p>\n      </div>\n      <div className=\"article-info\">\n        <div className=\"comment\">\n          <svg className=\"icon\" aria-hidden=\"true\">\n            <use xlinkHref=\"#icon-message-detail\"></use>\n          </svg>\n          <div className=\"comment-count\">{data.commentCount}</div>\n        </div>\n        <div className=\"category\">\n          <svg className=\"icon\" aria-hidden=\"true\">\n            <use xlinkHref=\"#icon-category_find_icon\"></use>\n          </svg>\n          <div className=\"category-name\">{data.category.name}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ListItem\n","import React from 'react'\n\ninterface Props {\n  \n}\n\n const GitItem: React.FC<Props> = () => {\n  return (\n    <div className='git-list-item'>\n      <img src=\"\" alt=\"\"/>\n      \n      <span></span>\n    </div>\n  )\n}\n\nexport default GitItem","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { ApplicationState } from '../../store/index'\nimport { Article, FETCH_REQUEST } from '../../store/article/types'\nimport { fetchRequest } from '../../store/article/action'\nimport ListItem from './components/ListItem';\nimport GitItem from './components/GitItem';\nimport './index.scss'\n\ntype PropFromMap = {\n  data: Article[],\n  loading:boolean\n}\n\ntype PropFromDispatch = {\n  fetchRequest: typeof fetchRequest\n}\n\ntype IState = {\n  loading:boolean\n}\ntype ComponentProps = PropFromDispatch & RouteComponentProps & PropFromMap\nclass Home extends Component<ComponentProps,IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      loading:this.props.loading\n    }\n  }\n\n  async componentDidMount() {\n    await this.props.fetchRequest({\n      type: FETCH_REQUEST, payload: {\n        page: 1,\n        limit:20\n    }})\n  }\n  \n\n  render() {\n    if (!this.state.loading && this.props.data.length!==0) {\n      return (  \n        <div className=\"home-wrapper\">\n          <section className=\"introduction\">\n            <div className='introduction-wrapper'>\n            <p className='title'>HI,WELCOME TO MY BLOG</p>\n              <p>MY,NAME IS <span className='name'>范剑峰</span></p>\n              <p>I'AM A beginner OF FRONT-END Developing</p>\n  \n              </div>\n          </section>\n          <div className=\"article-list\">\n            {this.props.data.slice(0, 4).map(item => (\n              <ListItem data={item} key={item._id}/>\n            ))}\n          </div>\n          <div className='git-list'>\n            <GitItem />\n            <GitItem />\n            <GitItem />\n            <div className='say'>\n              <div>STAY HUNGRY,\n               STAY FOOLISH</div>\n            </div>\n          </div>\n        </div>\n      )\n    } else {\n      return ''\n    }\n\n  }\n}\n\nconst mapState = ({ article }: ApplicationState) => {\n  return {\n    data: article.data,\n    loading:article.loading\n  }\n}\n\nconst mapDispatch = {\n  fetchRequest\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(Home)\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport article from '../../assets/svg/articles.svg'\nimport books from '../../assets/svg/books.svg'\nimport membership from '../../assets/svg/membership.svg'\n\nimport './index.scss'\n\ninterface IProps {\n  text?: string\n}\n\nconst Header: React.FC<IProps> = props => {\n  return (\n    <div className=\"header-wrapper\">\n      <div className=\"header-content\">\n        <div className=\"header-content-nav\">\n          <ul className=\"header-content-nav-link\">\n            <li className=\"home\">\n              <NavLink to=\"/home\">\n                <div className=\"img\">\n                  <img src={books} alt=\"\" />\n                </div>\n\n                <div className=\"title\">HOME</div>\n\n                <div className=\"desc\"> all the news showing </div>\n              </NavLink>\n            </li>\n            <li className=\"article\">\n              <NavLink to=\"/article\">\n                <div className=\"img\">\n                  <img src={article} alt=\"\" />\n                </div>\n                <div className=\"title\"> ARTICLE</div>\n                <div className=\"desc\">Development & some thought</div>\n              </NavLink>\n            </li>\n            <li className=\"about\">\n              <NavLink to=\"/about\">\n                <div className=\"img\">\n                  <img src={membership} alt=\"\" />\n                </div>\n                <div className=\"title\">ABOUT</div>\n                <div className=\"desc\">knowing more about me</div>\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport Avatar from '../../assets/img/avatar.jpg'\nimport './index.scss'\nimport { Article } from '../../store/article/types'\nimport { connect } from 'react-redux';\nimport { fetchArticle } from '../../api/article';\nimport { RouteComponentProps } from 'react-router-dom';\n\ninterface IProps {\n}\n\ninterface IState {\n  data?: Article\n  loading:boolean\n}\n\ntype ComponentProps = IProps & RouteComponentProps\n\nclass Detail extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props) \n    this.state = {\n      data: undefined,\n      loading:true\n    }\n  }\n\n  async componentDidMount() {\n    // 从浏览器地址获取当前文章的 ID,根据 ID 向服务器请求对应的数据\n    let id = this.props.history.location.pathname.split('detail/')[1]\n    let res = await fetchArticle(id)\n    if (res.data.data!==null) {\n      this.setState({\n        loading: false,\n        data:res.data.data\n      })\n    } else {\n      this.setState({ loading: false })\n      this.props.history.push('/')\n    } \n  }\n\n  render() {\n    if (this.state.data) {\n      return (\n        <div className=\"detail-wrapper\">\n          <aside className=\"detail-author-info\">\n            <div className=\"avatar-wrapper\">\n              <img src={Avatar} alt=\"\" />\n            </div>\n            <h3> about me</h3>\n            <article>我是一个自学者,也是一个初学者,目标是成为一个专业的前端工程师</article>\n          </aside>\n          <section className=\"detail-content\">\n            <p className=\"detail-content-time\">{this.state.data.createdAt}</p>\n            <p className=\"category\">\n              <svg className=\"icon\" aria-hidden=\"true\">\n                <use xlinkHref=\"#icon-category_find_icon\"></use>\n              </svg>\n              <span className=\"category-name\">{this.state.data.category.name}</span>\n            </p>\n            <h2 className=\"detail-content-title\">{this.state.data.title}</h2>\n            <hr />\n            <div className='markdown-body' dangerouslySetInnerHTML={{__html:this.state.data.content}}></div>\n          </section>\n        </div>\n      )\n    } else {\n      return ''\n    }\n   \n  }\n}\n\n\n\nexport default  Detail\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\n\ninterface Props {\n  \n}\n\n const ArticleListItem: React.FC<Props> = () => {\n  return (\n    <section className='articles-list-item'>\n      <h2>asdjfkahsdjkfhajksdhsfjkas</h2>\n      <span>2010-10-10 10:22:22</span>\n      <p>aklsfjklajsdklfjakldsjfklasjdsklfa\n        askdsfhasdfhjkashdjkfahsdjkfhasjkfakljsfklasdf\n      </p>\n      <span>分类:JavaScript</span> <br />\n      <span>点赞:22</span><br/>\n      <span>阅读:33</span><br/>\n      <NavLink to=\"/home\">阅读更多</NavLink>\n    </section>\n  )\n}\n\nexport default ArticleListItem","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { ApplicationState } from '../../store/index';\nimport ArticleListItem from './components/ArticleListItem'\nimport { ArticleState } from '../../store/article/types'\nimport {fetchRequest} from '../../store/article/action';\nimport  './index.scss';\n\n\ntype PropFromMap = {\n  article:ArticleState\n}\ntype PropFromDispatch = {\n  fetchRequest:typeof fetchRequest\n}\ntype ComponentProps = PropFromDispatch & RouteComponentProps & PropFromMap\nclass Article extends Component<ComponentProps> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      loading:this.props.article.loading\n    }\n  }\n  async componentDidMount() {\n    \n  }\n\n  render() {\n    return <section className='articles-wrapper'>\n      <ArticleListItem />\n      <ArticleListItem />\n      <ArticleListItem />\n      <ArticleListItem />\n    </section>\n  }\n}\n\nconst mapState = ({article}:ApplicationState) => {\n  return {\n    article\n  }\n}\n\nconst mapDispatch = {\n  fetchRequest\n}\n\nexport default connect( mapState, mapDispatch )(Article)","import React from 'react'\n\ninterface Props {\n  \n}\n\n const About: React.FC<Props> = () => {\n  return (\n    <div>\n      helloworld\n    </div>\n  )\n}\n\nexport default About","import React from 'react'\nimport { Route, Switch,Redirect } from 'react-router-dom'\n\nimport { History } from 'history'\n\nimport Home from './home/Home'\nimport Header from './components/Header'\nimport Detail from './detail/Detail'\nimport Articles from './article/Articles'\nimport About from './about/About'\n\ninterface IProps {\n  history: History\n}\n\nconst Routes: React.FC<IProps> = ({ history }) => {\n  return (\n    <div>\n      <Header />\n     {/*  <TransitionGroup\n      >\n         <CSSTransition timeout={500} key={location.pathname} classNames=\"fade\">*/}\n          <Switch>\n            <Route path=\"/home\" component={Home} />\n            <Route path=\"/detail/:id\"  component={Detail} />\n            <Route path=\"/article\"  component={Articles} />\n            <Route path=\"/about\"  component={About} />\n             <Redirect from='/' to='/home'/> \n          </Switch>\n      {/*   </CSSTransition>\n      </TransitionGroup> */}\n      </div>\n  )\n}\n\nexport default Routes\n","import React from 'react';\nimport {Store} from 'redux';\nimport { ApplicationState } from './store';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport {History} from 'history'\nimport Routes from './pages/Routes';\n\n// Main 组件需要传入的属性分别为由 redux 创建的 store,由浏览器历史 history\ninterface MainProps {\n  store: Store<ApplicationState>\n  history:History\n}\n\nconst Main: React.FC<MainProps> = ({ store, history }) => {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Routes history={history}/>\n      </ConnectedRouter>\n   </Provider>\n  );\n}\n\nexport default Main;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createBrowserHistory } from 'history'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './configureStore'\nimport Main from './Main'\nimport { History } from 'history'\n\nimport './index.scss';\n\nconst initialState = window.INITIAL_REDUX_STATE\n\n// tslint:disable-next-line\nconst history: History = createBrowserHistory()\nconst store = configureStore(history, initialState)\n\nReactDOM.render(<Main store={store} history={history} />, document.getElementById('root'))\nserviceWorker.unregister()\n","import { Store, createStore, applyMiddleware, compose } from 'redux'\nimport  createSagaMiddleware  from 'redux-saga'\n// 使用 使用 router-middle-ware 把浏览器 history 挂载到 redux 容器上\nimport { routerMiddleware } from 'connected-react-router'\n// 指明传递给 configureStore 的 history 参数为 History 类型\nimport { History } from 'history'\n// 导入状态接口,以及经过联合后的 reducers/sagas\nimport { createRootReducer, rootSaga,ApplicationState } from './store'\n\n\nexport default function configureStore(history: History,initialState: ApplicationState): Store<ApplicationState> {\n  // 创建saga 中间件\n  const sagaMiddleware = createSagaMiddleware()\n  // 使用 rootReducer/rootSaga,创建 store, 容器的初始状态(initialState)会在应用的入口传入\n  const store = createStore(\n    createRootReducer(history),\n    initialState,\n    compose(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n  )\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n"],"sourceRoot":""}