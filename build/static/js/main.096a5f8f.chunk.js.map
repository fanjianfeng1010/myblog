{"version":3,"sources":["store/articles/types.ts","store/articles/action.ts","store/category/types.ts","store/category/action.ts","config/default.config.ts","api/index.ts","api/user.ts","utils/crypto-js.ts","store/user/action.ts","store/user/types.ts","components/header/component/LoginForm.tsx","components/header/component/PersonOption.tsx","components/header/component/LoginModal.tsx","components/header/index.tsx","api/blog.ts","components/sider/index.tsx","pages/home/components/ArticleList.tsx","pages/home/components/ProjectTab.tsx","pages/home/index.tsx","pages/article/index.tsx","pages/about/index.tsx","pages/article/Blog.tsx","pages/article/BlogEditor.tsx","pages/admin/index.tsx","pages/admin/test.index.tsx","Routes.tsx","style.ts","App.tsx","serviceWorker.ts","store/articles/sagas.ts","store/articles/reducer.ts","store/category/sagas.ts","store/category/reducer.ts","store/user/reducer.ts","store/inex.ts","index.tsx","configStore.ts"],"names":["BlogActionTypes","categoryActionTypes","fetchRequest","action","FETCH_REQUEST","fetchSuccess","data","FETCH_SUCCESS","fetchError","message","FETCH_ERROR","APP_TOKEN_KEY","history","createBrowserHistory","codeMessage","200","201","202","204","400","401","403","404","406","410","422","500","502","503","504","axios","defaults","baseURL","withCredentials","transformRequest","Qs","stringify","interceptors","response","use","result","request","c","token","localStorage","getItem","url","includes","console","log","headers","authorization","error","Promise","reject","errortext","status","statusText","removeItem","push","notification","description","errorHandler","userLogin","Axios","post","encrypt","str","s","crypto","MD5","toString","enc","Hex","s1","slice","length","s2","AES","userLoginAction","type","NormalLoginForm","props","handleSubmit","e","preventDefault","form","validateFields","err","values","a","JSON","key","res","setItem","setingVisible","success","this","state","visble","getFieldDecorator","visible","visbleFromParent","footer","onCancel","ev","onSubmit","className","Item","rules","required","prefix","style","color","placeholder","valuePropName","initialValue","htmlType","onClick","React","Component","WrappedNormalLoginForm","Form","create","connect","PersonOption","menu","to","userLogoutAction","overlay","trigger","LoginModal","handleFormVisable","visable","setState","isFormVisble","login","icon","shape","mapDispatch","user","AppHeader","handleClick","current","category","fetchCategory","selectedKeys","mode","blogs","createArticle","batchDeleteArticle","articleIds","delete","getArticles","page","limit","tag","get","params","getArticle","id","md","getCategories","AppSilder","useState","rencent","setRencent","useEffect","items","bordered","width","src","alt","map","item","_id","title","IconText","text","marginRight","ArticleList","itemLayout","size","dataSource","pagination","onChange","pageSize","renderItem","delay","actions","viewsCount","likeCount","commentCount","extra","Meta","avatar","summary","content","ContentTab","target","value","TabPane","Tabs","AppHome","defaultActiveKey","textAlign","tab","ProjectTab","Article","isLoading","show","loading","filter","name","About","height","orientation","href","disabled","defaultValue","allowHalf","BlogContent","location","pathname","split","setTimeout","createdAt","source","rawSourcePos","escapeHtml","Option","Select","BlogEditor","handleChange","substr","articleId","hasFeedback","onSave","WrappedDynamicFieldSet","Admin","onSelectChange","selectedRowKeys","selectedRows","aticleId","index","element","artilceIds","articleData","fetchData","then","columns","dataIndex","render","record","component","leaveReverse","deletedCount","rowSelection","TestAdmin","deleteLoading","getCheckboxProps","spinning","rowKey","Routes","useLocation","sm","xs","lg","xl","TransitionGroup","CSSTransition","classNames","timeout","path","from","Globalstyle","createGlobalStyle","App","store","locale","zhCN","Boolean","window","hostname","match","watchFetchRequest","blogsSaga","param","call","put","Error","stack","takeEvery","all","fork","initialState","errors","undefined","reducer","payload","getCategory","categorySaga","rootSaga","createRootReducer","combineReducers","userReducer","blogReducer","categoryReducer","router","connectRouter","INITIAL_REDUX_STATE","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","createStore","applyMiddleware","routerMiddleware","run","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.096a5f8f.chunk.js","sourcesContent":["import { Category } from '../category/types'\nexport interface ResponseData<T> {\n  code: number\n  msg: string\n  data: T\n}\n\nexport interface Blog extends ApiResponse {\n  readonly _id: string\n  readonly title: string\n  readonly content?: string\n  readonly summary: string\n  readonly category: Category\n  readonly commentCount?: number\n  readonly viewsCount?: number\n  readonly likeCount?: number\n  readonly createdAt: string\n  readonly tags?: string[]\n  readonly pre?: string\n  readonly next?: string\n}\n\nexport interface Dataresponse {\n  code: number\n  msg: string\n  data: ResponseData<Blog[]>\n}\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum BlogActionTypes {\n  FETCH_REQUEST = '@@blog/FETCH_REQUEST',\n  FETCH_SUCCESS = '@@blog/FETCH_SUCCESS',\n  FETCH_ERROR = '@@blog/FETCH_ERROR'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface BlogState {\n  readonly loading: boolean\n  readonly data: Blog[]\n  readonly errors?: string\n}\n","import { action } from 'typesafe-actions'\nimport { BlogActionTypes, Blog } from './types'\n\nexport const fetchRequest = () => action(BlogActionTypes.FETCH_REQUEST)\n\nexport const fetchSuccess = (data: Blog[]) => action(BlogActionTypes.FETCH_SUCCESS, data)\nexport const fetchError = (message: string) => action(BlogActionTypes.FETCH_ERROR, message)\n","export interface ResponseData<T> {\n  code: number\n  msg: string\n  data: T\n}\n\nexport interface Category extends ApiResponse {\n  readonly _id: string\n  readonly name: string\n  readonly createdAt: string\n  readonly updatedAt: string\n  readonly articleCount: number\n}\n\nexport interface Dataresponse {\n  code: number\n  msg: string\n  data: ResponseData<Category[]>\n}\n\n// This type is basically shorthand for `{ [key: string]: any }`. Feel free to replace `any` with\n// the expected return type of your API response.\nexport type ApiResponse = Record<string, any>\n\n// Use `enum`s for better autocompletion of action type names. These will\n// be compiled away leaving only the final value in your compiled code.\n//\n// Define however naming conventions you'd like for your action types, but\n// personally, I use the `@@context/ACTION_TYPE` convention, to follow the convention\n// of Redux's `@@INIT` action.\nexport enum categoryActionTypes {\n  FETCH_REQUEST = '@@category/FETCH_REQUEST',\n  FETCH_SUCCESS = '@@category/FETCH_SUCCESS',\n  FETCH_ERROR = '@@category/FETCH_ERROR'\n}\n\n// Declare state types with `readonly` modifier to get compile time immutability.\n// https://github.com/piotrwitek/react-redux-typescript-guide#state-with-type-level-immutability\nexport interface CategoryState {\n  readonly loading: boolean\n  readonly data: Category[]\n  readonly errors?: string\n}\n","import { action } from 'typesafe-actions'\nimport { categoryActionTypes, Category } from './types'\n\nexport const fetchRequest = () => action(categoryActionTypes.FETCH_REQUEST)\n\nexport const fetchSuccess = (data: Category[]) => action(categoryActionTypes.FETCH_SUCCESS, data)\nexport const fetchError = (message: string) => action(categoryActionTypes.FETCH_ERROR, message)\n","export const APP_TOKEN_KEY = 'NODEBLOG/blog.fanjianfeng1010.com/TOKEN'\n","import axios, { AxiosRequestConfig } from 'axios'\nimport Qs from 'qs'\nimport { APP_TOKEN_KEY } from '../config/default.config'\nimport { createBrowserHistory } from 'history'\nimport { notification } from 'antd'\nlet history = createBrowserHistory()\n\nconst codeMessage: any = {\n  200: '服务器成功返回请求的数据。',\n  201: '新建或修改数据成功。',\n  202: '一个请求已经进入后台排队（异步任务）。',\n  204: '删除数据成功。',\n  400: '发出的请求有错误，服务器没有进行新建或修改数据的操作。',\n  401: '用户没有权限（令牌、用户名、密码错误）。',\n  403: '用户得到授权，但是访问是被禁止的。',\n  404: '发出的请求针对的是不存在的记录，服务器没有进行操作。',\n  406: '请求的格式不可得。',\n  410: '请求的资源被永久删除，且不会再得到的。',\n  422: '当创建一个对象时，发生一个验证错误。',\n  500: '服务器发生错误，请检查服务器。',\n  502: '网关错误。',\n  503: '服务不可用，服务器暂时过载或维护。',\n  504: '网关超时。'\n}\n\n/**\n * 异常处理程序\n */\nconst errorHandler = (error: { response: any }): any => {\n  const { response = {} } = error\n  const errortext: any = codeMessage[response.status] || response.statusText\n  const { status } = response\n  switch (status) {\n    case 401:\n      // 返回 401 清除token信息并跳转到登录页面\n      localStorage.removeItem(APP_TOKEN_KEY)\n      history.push('/user/login')\n      return Promise.reject(error)\n    case 403:\n      // 返回 401 清除token信息并跳转到登录页面\n      localStorage.removeItem(APP_TOKEN_KEY)\n      history.push('/user/login')\n      return Promise.reject(error)\n    default:\n      break\n  }\n  notification.error({\n    message: `请求错误 ${status}`,\n    description: errortext\n  })\n  return Promise.reject(error)\n}\n\naxios.defaults.baseURL = 'http://127.0.0.1:2300'\naxios.defaults.withCredentials = true\naxios.defaults.transformRequest = (data = {}) => Qs.stringify(data)\naxios.interceptors.response.use((result: AxiosRequestConfig) => result.data)\naxios.interceptors.request.use(\n  function(c: any) {\n    const token = localStorage.getItem(APP_TOKEN_KEY)\n    if (!(c.url.includes('getFirstLoginInfo') || c.url.includes('login'))) {\n      if (!token) {\n        console.log('没有授权')\n      }\n    }\n    c.headers['Content-Type'] = 'application/x-www-form-urlencoded'\n    c.headers.authorization = token || ''\n    return c\n  },\n  function(error) {\n    return Promise.reject(error)\n  }\n)\n\n/**\n * 配置request请求时的默认参数\n */\naxios.interceptors.response.use(\n  function(response) {\n    return response\n  },\n  function(error) {\n    return errorHandler(error)\n  }\n)\n\nexport default axios\n","import Axios from './index'\n\n// 发送登录请求\nexport const userLogin = (data: userLoginParams) => Axios.post('/api/login', data)\n\ninterface userLoginParams {\n  key: string\n}\n","import crypto from 'crypto-js'\n\n//加密方法\nexport const encrypt = (str: string) => {\n  let md5 = crypto.MD5(str)\n  const s = md5.toString(crypto.enc.Hex)\n  const s1 = s.slice(0, s.length / 2)\n  const s2 = s.slice(s.length / 2, s.length)\n  let encrypted = crypto.AES.encrypt(str, s)\n  return s1 + encrypted.toString() + s2\n}\n\nexport const md5 = crypto.MD5\n","import { USER_LOGIN_ACTION, USER_LOGOUT_ACTION } from './types'\n\nexport const userLoginAction = () => {\n  return {\n    type: USER_LOGIN_ACTION\n  }\n}\n\nexport const userLogoutAction = () => {\n  return {\n    type: USER_LOGOUT_ACTION\n  }\n}\n","export interface UserState {\n  login: boolean\n}\n\nexport const USER_LOGIN_ACTION = 'USER_LOGIN_ACTION'\nexport type USER_LOGIN_ACTION = typeof USER_LOGIN_ACTION\n\nexport const USER_LOGOUT_ACTION = 'USER_LOGOUT_ACTION'\nexport type USER_LOGOUT_ACTION = typeof USER_LOGOUT_ACTION\n\nexport interface UserLoginAction {\n  type: USER_LOGIN_ACTION\n}\n\nexport interface UserLogOutAction {\n  type: USER_LOGOUT_ACTION\n}\n\nexport type UserAction = UserLoginAction | UserLogOutAction\n","import React from 'react'\nimport { Form, Icon, Input, Button, Checkbox, Modal, message } from 'antd'\nimport { FormComponentProps } from 'antd/lib/form'\nimport { userLogin } from '../../../api/user'\nimport { encrypt } from '../../../utils/crypto-js'\nimport { APP_TOKEN_KEY } from '../../../config/default.config'\nimport { userLoginAction } from '../../../store/user/action'\nimport { connect } from 'react-redux'\n\ninterface IProps {\n  visbleFromParent: boolean\n  setingVisible: (arg: boolean) => any\n}\n\ninterface PropFromDispatch {\n  userLoginAction: typeof userLoginAction\n}\n\ntype componentPorps = IProps & PropFromDispatch & FormComponentProps\ninterface IState {\n  visble: boolean\n}\n\nclass NormalLoginForm extends React.Component<componentPorps, IState> {\n  constructor(props: componentPorps) {\n    super(props)\n    this.state = {\n      visble: true\n    }\n  }\n\n  handleSubmit = (e: any) => {\n    e.preventDefault()\n    this.props.form.validateFields(async (err, values) => {\n      // 校验数据输入合法后,把得到的结果转化为字符串并加密,使用 userLogin 方法把数据发送到服务器上\n      // 如果服务器返回登录的数据不为 null,即登录成功,此时把把服务器发送回来的 token 保存在 localStorage 中\n      let str = encrypt(JSON.stringify(values))\n      if (!err) {\n        let res = await userLogin({ key: str })\n        if (res.data.token) {\n          localStorage.setItem(APP_TOKEN_KEY, res.data.token)\n          this.props.setingVisible(false)\n          message.success('登录成功')\n          this.props.userLoginAction()\n        }\n      }\n    })\n  }\n\n  render() {\n    const { getFieldDecorator } = this.props.form\n    return (\n      <Modal\n        visible={this.props.visbleFromParent}\n        footer={null}\n        onCancel={(ev) => {\n          this.props.setingVisible(false)\n        }}>\n        <Form onSubmit={this.handleSubmit} className=\"login-form\">\n          <Form.Item>\n            {getFieldDecorator('account', {\n              rules: [{ required: true, message: 'Please input your username!' }]\n            })(\n              <Input\n                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                placeholder=\"Username\"\n              />\n            )}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('password', {\n              rules: [{ required: true, message: 'Please input your Password!' }]\n            })(\n              <Input\n                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                type=\"password\"\n                placeholder=\"Password\"\n              />\n            )}\n          </Form.Item>\n          <Form.Item>\n            {getFieldDecorator('remember', {\n              valuePropName: 'checked',\n              initialValue: true\n            })(<Checkbox>Remember me</Checkbox>)}\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              className=\"login-form-button\"\n              onClick={this.handleSubmit}>\n              Log in\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n    )\n  }\n}\n\nconst WrappedNormalLoginForm = Form.create<componentPorps>()(NormalLoginForm)\n\nexport default connect(\n  null,\n  { userLoginAction }\n)(WrappedNormalLoginForm)\n","import React, { Component } from 'react'\nimport { Menu, Dropdown, Icon, Button, message } from 'antd'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { APP_TOKEN_KEY } from '../../../config/default.config'\nimport { userLogoutAction } from '../../../store/user/action'\n\ntype ComponentProps = {\n  userLogoutAction: typeof userLogoutAction\n}\n\nclass PersonOption extends Component<ComponentProps> {\n  menu = (\n    <Menu>\n      <Menu.Item>\n        <Link to=\"/editor\">写文章</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to=\"/admin\">管理</Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Button\n          type=\"link\"\n          onClick={(ev: any) => {\n            localStorage.removeItem(APP_TOKEN_KEY)\n            this.props.userLogoutAction()\n            message.success('祝你生活愉快')\n          }}>\n          退出登录\n        </Button>\n      </Menu.Item>\n    </Menu>\n  )\n  render() {\n    return (\n      <div>\n        <Dropdown overlay={this.menu} trigger={['click']}>\n          <Link to=\"/\">\n            <Icon type=\"down\" />\n            晚上好,范剑峰\n          </Link>\n        </Dropdown>\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  null,\n  { userLogoutAction }\n)(PersonOption)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Button } from 'antd'\nimport WrappedNormalLoginForm from './LoginForm'\nimport PersonOption from './PersonOption'\nimport { ApplicationState } from '../../../store/inex'\nimport { userLoginAction } from '../../../store/user/action'\n\ntype IState = {\n  isFormVisble: boolean\n}\n\ntype PromFromMap = {\n  login: boolean\n}\ntype PropFromDispath = {\n  userLoginAction: typeof userLoginAction\n}\ntype ComponentProps = PromFromMap & PropFromDispath\n\nclass LoginModal extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      isFormVisble: false\n    }\n  }\n\n  handleFormVisable = (visable: boolean) => {\n    this.setState({\n      isFormVisble: !this.state.isFormVisble\n    })\n  }\n  render() {\n    return (\n      <div className=\"login\">\n        {/* 如果当前用户是登录状态,那么在右上角显示用户可以进行的操作选项,\n        否则就显示一个可以点击的按钮,点击按钮会生成一个模态框,用户可以用来进行登录操作 */}\n        {this.props.login ? (\n          <PersonOption />\n        ) : (\n          <Button\n            icon=\"user\"\n            shape=\"circle\"\n            type=\"primary\"\n            onClick={(ev) => {\n              this.setState({\n                isFormVisble: true\n              })\n            }}></Button>\n        )}\n        <WrappedNormalLoginForm\n          visbleFromParent={this.state.isFormVisble}\n          setingVisible={(visble) => this.handleFormVisable(this.state.isFormVisble)}\n        />\n      </div>\n    )\n  }\n}\n\nconst mapState = ({ user }: ApplicationState) => {\n  return {\n    login: user.login\n  }\n}\nconst mapDispatch = {\n  userLoginAction\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(LoginModal)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { ApplicationState } from '../../store/inex'\nimport { Menu, Icon } from 'antd'\nimport { fetchRequest } from '../../store/articles/action'\nimport { fetchRequest as fetchCategory } from '../../store/category/action'\n\n// 自己写的组件\nimport { Blog } from '../../store/articles/types'\nimport LoginModal from './component/LoginModal'\n\n// css\nimport './styles.less'\nimport { Category } from '../../store/category/types'\n\ntype headerState = {\n  current: string\n}\ntype PropFromMap = {\n  data: Blog[]\n  login: boolean\n  category: Category[]\n}\ntype PropFromDispatch = {\n  fetchRequest: typeof fetchRequest\n  fetchCategory: typeof fetchCategory\n}\ntype ComponentProps = PropFromDispatch & PropFromMap\n\nclass AppHeader extends Component<ComponentProps, headerState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      current: 'home'\n    }\n  }\n\n  // 在进入主页时,从服务器中加载数据,并且把文章数据放进 redux 中,因为头部组件是多个页面共享的组件\n  // 所以在头部组件发送请求获取数据.\n\n  async componentDidMount() {\n    // 如果组件已经有数据了,就不必再发送请求了\n    if (!this.props.data || this.props.data.length === 0) {\n      await this.props.fetchRequest()\n    }\n    if (!this.props.category || this.props.category.length === 0) {\n      await this.props.fetchCategory()\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"header-wrapper\">\n        <Menu onClick={this.handleClick} selectedKeys={[this.state.current]} mode=\"horizontal\">\n          <Menu.Item key=\"home\">\n            <Link to=\"/home\">\n              <Icon type=\"home\" />\n              首页\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"article\">\n            <Link to=\"/article\">\n              <Icon type=\"profile\" />\n              文章\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"about\">\n            <Link to=\"/about\">\n              <Icon type=\"user\" />\n              关于\n            </Link>\n          </Menu.Item>\n        </Menu>\n        <LoginModal />\n      </div>\n    )\n  }\n\n  // 设置点击不同组件时 active 效果\n  handleClick = (e: any) => {\n    this.setState({\n      current: e.key\n    })\n  }\n}\n\n// 把 redux 容器的中数据挂载到组件的 props 上\nconst mapState = ({ blogs, user, category }: ApplicationState) => {\n  return {\n    data: blogs.data,\n    login: user.login,\n    category: category.data\n  }\n}\n\nconst mapDispatch = {\n  fetchRequest,\n  fetchCategory\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(AppHeader)\n","import axios from './index'\n\n// 添加新的文章\nexport const createArticle = (data: any) => axios.post('/api/articles', data)\n\n// 修改文章内容\nexport const updateArticleById = (id: string, data: any) => axios.put(`/api/articles/${id}`, data)\n\n// 删除指定文章\nexport const deleteArticleById = (id: string) => axios.delete(`/api/article/${id}`)\n\n// 批量删除文章\nexport const batchDeleteArticle = (articleIds: string[]) => {\n  return axios.delete('/api/articles', {\n    data: { articleIds: articleIds }\n  })\n}\n\n// 获取所有文章\nexport const getArticles = (page: number, limit: number, category?: string, tag?: string) =>\n  axios.get('/api/articles', {\n    params: {\n      page,\n      limit,\n      category,\n      tag\n    }\n  })\n\n// 获取单篇文章\nexport const getArticle = (id: string, md = false) =>\n  axios.get(`/api/article/${id}`, {\n    params: {\n      md\n    }\n  })\n\n// 获取所有分类\nexport const getCategories = () => {\n  return axios.get('/api/categories')\n}\n\n// 新增 文章分类\nexport const createCategory = (name: string) => {\n  return axios.post('/api/category', {\n    name\n  })\n}\n\n// 获得最近三篇文章\nexport const getRencent = () => {\n  return axios.get('/api/rencent')\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { Card, Icon, Divider, Skeleton } from 'antd'\n// import { RouteComponentProps } from 'react-router-dom'\nimport './style.less'\nimport { Blog } from '../../store/articles/types'\nimport { getRencent } from '../../api/blog'\n\n// 这个模块主要是侧栏,没有太多需要与用户交户的操作,所以使用函数组件,需要从服务器获取一次数据,\n// 使用了 hook effect\nconst AppSilder: React.FC<any> = () => {\n  const [rencent, setRencent] = useState<Blog[]>([])\n  useEffect(() => {\n    ;(async function anyfunction() {\n      let res = await getRencent()\n      setRencent(res.data.items)\n    })()\n  }, [])\n  return (\n    <Card bordered={true} style={{ width: '100%' }}>\n      <div className=\"account\">\n        <img\n          src=\"https://gw.alipayobjects.com/zos/antfincdn/XAosXuNZyF/BiazfanxmamNRoxxVxka.png\"\n          alt=\"\"\n        />\n        <div className=\"account-name\">范剑峰</div>\n        <div>座右铭</div>\n      </div>\n      <div className=\"account-detail\">\n        <p>\n          <Icon type=\"tag\" /> 前端程序员\n        </p>\n        <p>\n          <Icon type=\"contacts\" /> 广东,广州\n        </p>\n      </div>\n\n      <Divider />\n      <div className=\"tag\">\n        <div className=\"tag-title\">标签</div>\n        <span className=\"tag-content\">认真</span>\n      </div>\n      {/* 从服务器接口返回数据加载 */}\n      <Divider />\n\n      <div className=\"recent-article\">\n        <div className=\"rencent-article-title\">最新文章</div>\n      </div>\n      {rencent.length !== 0 ? (\n        rencent.map((item) => <p key={item._id}>{item.title}</p>)\n      ) : (\n        <Skeleton />\n      )}\n    </Card>\n  )\n}\n\nexport default AppSilder\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { List, Icon, Avatar } from 'antd'\nimport { ApplicationState } from '../../../store/inex'\nimport { Blog } from '../../../store/articles/types'\nimport QueueAnim from 'rc-queue-anim'\nimport { Link } from 'react-router-dom'\n\nconst IconText = ({ type, text }: any) => (\n  <span>\n    <Icon type={type} style={{ marginRight: 8 }} />\n    {text}\n  </span>\n)\n\ninterface OwnProps {}\ninterface PropsFromMap {\n  data: Blog[]\n}\ntype ComponentProps = PropsFromMap & OwnProps\n\nclass ArticleList extends Component<ComponentProps> {\n  render() {\n    return (\n      <div>\n        <List\n          itemLayout=\"vertical\"\n          size=\"large\"\n          dataSource={this.props.data}\n          pagination={{\n            onChange: (page) => {},\n            pageSize: 3\n          }}\n          footer={\n            <div>\n              <b>ant design</b> footer part\n            </div>\n          }\n          renderItem={(item: Blog) => (\n            <QueueAnim delay={1000} className=\"queue-simple\">\n              <List.Item\n                key={item.title}\n                actions={[\n                  <IconText type=\"star-o\" text={item.viewsCount} key=\"list-vertical-star-o\" />,\n                  <IconText type=\"like-o\" text={item.likeCount} key=\"list-vertical-like-o\" />,\n                  <IconText type=\"message\" text={item.commentCount} key=\"list-vertical-message\" />\n                ]}\n                extra={\n                  <img\n                    width={272}\n                    alt=\"logo\"\n                    src=\"https://i.loli.net/2019/10/27/Zo46FpD53HmPC9Q.jpg\"\n                  />\n                }>\n                <List.Item.Meta\n                  avatar={<Avatar src=\"https://i.loli.net/2019/10/27/Zo46FpD53HmPC9Q.jpg\" />}\n                  title={<Link to={`/blog/${item._id}`}>{item.title}</Link>}\n                  description={item.summary}\n                />\n                {item.content}\n              </List.Item>\n            </QueueAnim>\n          )}\n        />\n      </div>\n    )\n  }\n}\nconst mapState = ({ blogs }: ApplicationState) => {\n  let data = blogs.data\n  return { data }\n}\n\nconst mapDispatch = {}\nexport default connect(\n  mapState,\n  mapDispatch\n)(ArticleList)\n","import React from 'react'\n\nimport {  Empty } from 'antd'\n\nclass ContentTab extends React.Component {\n  state = { size: 'small' }\n\n  onChange = (e: any) => {\n    this.setState({ size: e.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        <Empty />\n      </div>\n    )\n  }\n}\n\nexport default ContentTab\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Card, Tabs } from 'antd'\n\n// 自己写的组件\nimport ArticleList from './components/ArticleList'\nimport ProjectTab from './components/ProjectTab'\n// style\nimport './style.less'\nimport { ApplicationState } from '../../store/inex'\nimport { Blog } from '../../store/articles/types'\nimport { RouteComponentProps } from 'react-router-dom'\nconst { TabPane } = Tabs\n\ntype PropFromMap = {\n  data: Blog[]\n}\ntype PropFromDispatch = {}\ntype ComponentProps = PropFromDispatch & PropFromMap & RouteComponentProps\nclass AppHome extends Component<ComponentProps> {\n  render() {\n    return (\n      <Card>\n        <Tabs defaultActiveKey=\"1\" size={'large'} style={{ textAlign: 'left' }}>\n          <TabPane tab=\"文章\" key=\"1\">\n            <div className=\"card-body\">\n              {/* loading 效果要实现 */}\n              <ArticleList />\n            </div>\n          </TabPane>\n          <TabPane tab=\"项目\" key=\"2\">\n            <ProjectTab />\n          </TabPane>\n        </Tabs>\n      </Card>\n    )\n  }\n}\n\nconst mapState = ({ blogs }: ApplicationState) => {\n  return {\n    data: blogs.data\n  }\n}\n\nexport default connect(\n  mapState,\n  null\n)(AppHome)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Link, RouteComponentProps } from 'react-router-dom'\nimport { Skeleton, Card, Tag, Divider, List, Avatar } from 'antd'\n\n// css\nimport './index.less'\nimport { ApplicationState } from '../../store/inex'\nimport { Blog } from '../../store/articles/types'\nimport { fetchRequest } from '../../store/articles/action'\n\ninterface IState {\n  isLoading: boolean\n  show: boolean\n}\ntype PropFromMap = {\n  data: Blog[]\n}\ntype PropFromDispatch = {\n  fetchRequest: typeof fetchRequest\n}\ntype ComponentProps = PropFromDispatch & RouteComponentProps & PropFromMap\n\nclass Article extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      show: false\n    }\n  }\n\n  async componentDidMount() {\n    if (!this.props.data || this.props.data.length !== 0) {\n      let res = await fetchRequest()\n      console.log(res)\n    }\n    console.log(this.props.data)\n    this.setState({\n      show: true,\n      isLoading: false\n    })\n  }\n\n  render() {\n    if (!this.props.data || this.props.data.length === 0) {\n      return <Skeleton></Skeleton>\n    }\n    const { data } = this.props\n    console.log(data)\n    return (\n      <Skeleton loading={this.state.isLoading}>\n        <Card className=\"articleWrapper\">\n          <div className=\"category\">\n            <Tag color=\"magenta\">javascrpt</Tag>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={data.filter((item) => item.category.name === 'javascript')}\n              renderItem={(item) => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={<Avatar src=\"https://i.loli.net/2019/10/27/Zo46FpD53HmPC9Q.jpg\" />}\n                    title={<Link to={`/blog/${item._id}`}>{item.title}</Link>}\n                    description={item.summary}\n                  />\n                </List.Item>\n              )}\n            />\n          </div>\n          <Divider />\n          <div className=\"category\">\n            <Tag color=\"orange\">css</Tag>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={data.filter((item: Blog) => item.category.name === 'css')}\n              renderItem={(item) => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={<Avatar src=\"https://i.loli.net/2019/10/27/Zo46FpD53HmPC9Q.jpg\" />}\n                    title={<Link to={`/blog/${item._id}`}>{item.title}</Link>}\n                    description={item.summary}\n                  />\n                </List.Item>\n              )}\n            />\n          </div>\n          <Divider />\n          <div className=\"category\">\n            <Tag color=\"orange\">随笔</Tag>\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={data.filter((item: Blog) => item.category.name === 'note')}\n              renderItem={(item) => (\n                <List.Item>\n                  <List.Item.Meta\n                    avatar={<Avatar src=\"https://i.loli.net/2019/10/27/Zo46FpD53HmPC9Q.jpg\" />}\n                    title={<Link to={`/blog/${item._id}`}>{item.title}</Link>}\n                    description={item.summary}\n                  />\n                </List.Item>\n              )}\n            />\n          </div>\n          <Divider />\n        </Card>\n      </Skeleton>\n    )\n  }\n}\n\nconst mapState = ({ blogs }: ApplicationState) => {\n  return {\n    data: blogs.data\n  }\n}\n\nexport default connect(\n  mapState,\n  {}\n)(Article)\n","import React from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { Card, Skeleton, Divider, Icon, Rate } from 'antd'\n\nimport './index.less'\n\ntype ComponentProps = RouteComponentProps\nconst About: React.FC<ComponentProps> = () => {\n  return (\n    <Skeleton loading={false}>\n      <Card className=\"about-wrapper\" style={{ height: '100vh' }}>\n        <Divider orientation={'left'}>博客简述</Divider>\n        <p>\n          本博客是使用react + and + nestjs + mongo 实现的\n          还有很多做得不好的地方,项目的成因是因为自学了那么久,都是看视频,没试过自己去实现项目,\n          于是就想把自己学到东西实践一下,同时可以检测一下自己哪里还学得不够好,在项目中,发现了自己好多知识学习得不好,\n          同时也进步了很多\n        </p>\n        <Divider orientation={'left'}>关于我</Divider>\n        <ul>\n          <li>姓名:范剑峰</li>\n          <li>毕业院校:广东轻工职业技术学院</li>\n          <li>学历专业:大专 | 软件技术</li>\n          <li>\n            联系方式:\n            <Icon type=\"mail\" />\n            <a href=\"mailto:264589826@qq.com\">264589826@qq.com</a>\n            <Icon type=\"phone\" /> 13416179124\n          </li>\n          <li>坐标:广州市</li>\n          <li>\n            技能\n            <ul className=\"skill\">\n              <li>\n                HTML、CSS、Javascript：能熟练开发符合 W3C 标准的页面！\n                <Rate disabled defaultValue={3} />\n              </li>\n              <li>\n                react ：熟练掌握使用！\n                <Rate allowHalf disabled defaultValue={2.5} />\n              </li>\n              <li>\n                es6：掌握基本面向对象编程实现！\n                <Rate allowHalf disabled defaultValue={3} />\n              </li>\n              <li>\n                typescript:日常使用 typescript 构建类型明确的应用\n                <Rate allowHalf disabled defaultValue={3} />\n              </li>\n              <li>\n                webpack: 入门级别，可以对脚手架进行针对性的配置！\n                <Rate disabled defaultValue={2.5} />\n              </li>\n              <li>\n                node mysql：针对需求可以做到简单的数据库设计、接口的开发与设计！\n                <Rate allowHalf disabled defaultValue={2.5} />\n              </li>\n              <li>\n                个人\n                <ul>\n                  <li>良好的代码习惯,规范注释</li>\n                  <li>正在求职,欢迎交流</li>\n                </ul>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </Card>\n    </Skeleton>\n  )\n}\n\nexport default About\n","import React, { Component } from 'react'\n\nimport { Card, Divider, Icon, Tag, message, BackTop } from 'antd'\nimport ReactMarkdown from 'react-markdown'\nimport { getArticle } from '../../api/blog'\nimport { Blog } from '../../store/articles/types'\nimport { RouteComponentProps } from 'react-router-dom'\n\nimport './test.less'\n\ninterface Props {}\ninterface IState {\n  data: Blog | null\n  loading: boolean\n}\ntype ComponentProps = Props & RouteComponentProps\n\nclass BlogContent extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      data: null,\n      loading: true\n    }\n  }\n  async componentDidMount() {\n    if (this.state.data === null) {\n      let id = this.props.location.pathname.split('g/')[1]\n      let res = await getArticle(id, false)\n      console.log(res)\n      if (res.data) {\n        this.setState({\n          loading: false,\n          data: res.data\n        })\n      } else {\n        message.error('你好像来到一个没有知识的荒原了,立刻为你跳转到首页')\n        setTimeout(() => {\n          this.props.history.push('/home')\n        }, 3000)\n      }\n    }\n  }\n\n  render() {\n    if (this.state.data === null) return ''\n    let { data } = this.state\n    let { createdAt } = data\n    createdAt = createdAt.split('T')[0]\n    return (\n      <div>\n        <Card title=\"博文标题\" style={{ textAlign: 'center' }}>\n          <BackTop />\n          <div className=\"info\">\n            <Icon type=\"note\" />\n            {createdAt}\n            <Divider type=\"vertical\" />\n            <Icon type=\"eye\" style={{ marginRight: '5px' }} />\n            {data.viewsCount}\n            <Divider type=\"vertical\" />\n            <Icon type=\"tag\" style={{ marginRight: '5px' }} />\n            <Tag color=\"red\">{data.category.name}</Tag>\n            <Divider type=\"vertical\" />\n          </div>\n          <Divider />\n          <div style={{ textAlign: 'left' }}>\n            <ReactMarkdown source={data!.content} rawSourcePos={true} escapeHtml={false} />\n          </div>\n        </Card>\n      </div>\n    )\n  }\n}\n\nexport default BlogContent\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { Form, Button, Icon, Input, Checkbox, Select } from 'antd'\nimport Editor from 'for-editor'\nimport { FormComponentProps } from 'antd/lib/form'\nimport { createArticle, getCategories, createCategory } from '../../api/blog'\nimport { ApplicationState } from '../../store/inex'\nimport { fetchRequest as fetchCategory } from '../../store/category/action'\nimport { Category } from '../../store/category/types'\n\ntype PropFromMap = {\n  category: Category[]\n}\n\ntype PropFromDispatch = {\n  fetchCategory: typeof fetchCategory\n}\n\ntype ComponentProps = RouteComponentProps & FormComponentProps & PropFromMap & PropFromDispatch\ninterface EditorState {\n  value: string\n  data: string\n}\n\nconst { Option } = Select\n\nclass BlogEditor extends Component<ComponentProps, EditorState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      data: '',\n      value: ''\n    }\n  }\n\n  async componentDidMount() {\n    if (!this.props.category || this.props.category.length === 0) {\n      await this.props.fetchCategory\n    }\n  }\n\n  handleChange = (value: string) => {\n    this.setState({\n      value\n    })\n  }\n\n  handleSubmit = (e: any) => {\n    e.preventDefault()\n    this.props.form.validateFields(async (err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values)\n        // 这里添加对 summary 的处理,把 contnet的一部分内容截取成为 summary 的一部分,方便渲染\n        let { title, content, category } = values,\n          summary = content.substr(0, 30)\n        let data = { title, content, summary, category }\n        let res = await createArticle(data)\n        if (res && res.data) {\n          const articleId = res.data._id\n          this.props.history.push(`/blog/${articleId}`)\n        }\n      }\n    })\n  }\n\n  render() {\n    // 如果种类不存在,则返回空\n    if (!this.props.category || this.props.category.length === 0) return ''\n    const { category } = this.props\n    const { getFieldDecorator } = this.props.form\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\n        <Form.Item hasFeedback>\n          {getFieldDecorator('category', {\n            rules: [{ required: true, message: '请选择文章种类' }]\n          })(\n            <Select placeholder=\"请选择文章种类\">\n              {category.map((item) => (\n                <Option value={item._id}>{item.name}</Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('title', {\n            rules: [{ required: true, message: '请输入文章标题!' }]\n          })(\n            <Input\n              prefix={<Icon type=\"pen\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder=\"title\"\n            />\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator('content', {\n            rules: [{ required: true, message: '请开始你的大作' }]\n          })(\n            <Editor\n              value={this.state.value}\n              onChange={this.handleChange}\n              onSave={(ev: any) => {\n                this.setState({\n                  data: ev\n                })\n              }}\n            />\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n            发表文章\n          </Button>\n        </Form.Item>\n      </Form>\n    )\n  }\n}\n\nconst WrappedDynamicFieldSet = Form.create({ name: 'dynamic_form_item' })(BlogEditor)\n\nconst mapState = ({ category }: ApplicationState) => {\n  return {\n    category: category.data\n  }\n}\n\nconst mapDispatch = {\n  fetchCategory\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(WrappedDynamicFieldSet)\n","import React, { Component } from 'react'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { Table, Divider, Button, Tag, message } from 'antd'\nimport QueueAnim from 'rc-queue-anim'\nimport { deleteArticleById, batchDeleteArticle, getArticles } from '../../api/blog'\nimport { ApplicationState } from '../../store/inex'\nimport { Blog } from '../../store/articles/types'\nimport { fetchRequest } from '../../store/articles/action'\n\ntype PropFromMap = {\n  data: Blog[]\n}\ntype PropFromDispatch = {\n  fetchRequest: typeof fetchRequest\n}\ntype ComponentProps = PropFromDispatch & RouteComponentProps & PropFromMap\n\ninterface IState {\n  selectedRowKeys: Array<any>\n  articleData: Array<any>\n  artilceIds: string[]\n  loading: boolean\n}\nclass Admin extends Component<ComponentProps, IState> {\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      loading: false,\n      selectedRowKeys: [], // Check here to configure the default column\n      articleData: [],\n      artilceIds: []\n    }\n  }\n\n  // 需求 点击复选框时把 key 添加到 stringId 数组,取消时同 stringId 数组删除\n\n  // 组件加载成功后把数组添加进 state\n  async componentDidMount() {\n    this.fetchData()\n  }\n\n  // 选择改变时,把已经被选中的内容添加到组件状态中\n  onSelectChange = (selectedRowKeys: any, selectedRows: any) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys)\n    let aticleId: Array<any> = []\n    for (let index = 0; index < selectedRows.length; index++) {\n      const element = selectedRows[index]\n      aticleId.push(element._id)\n    }\n    this.setState({ selectedRowKeys, artilceIds: aticleId })\n  }\n\n  fetchData() {\n    this.setState({ loading: true })\n    getArticles(1, 20).then((res) => {\n      this.setState({\n        articleData: res.data.items,\n        loading: false\n      })\n    })\n  }\n\n  render() {\n    const columns = [\n      {\n        title: 'title',\n        dataIndex: '_id',\n        key: '_id',\n        render: (text: string, record: any) => {\n          return <Tag>{record.title}</Tag>\n        }\n      },\n      {\n        title: 'category',\n        dataIndex: 'category.name',\n        key: 'age'\n      },\n      {\n        title: 'Action',\n        key: 'action',\n        render: (text: any, record: any) => (\n          <QueueAnim component=\"ul\" type={['right', 'left']} leaveReverse>\n            <span>\n              <Divider type=\"vertical\" />\n              <Button\n                onClick={async (ev: any) => {\n                  let result = await deleteArticleById(record._id)\n                  if (result.data.deletedCount >= 0) {\n                    await this.props.fetchRequest()\n                    message.success('删除成功')\n                  }\n                }}>\n                Delete\n              </Button>\n            </span>\n          </QueueAnim>\n        )\n      }\n    ]\n    const { selectedRowKeys } = this.state\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange\n    }\n    return (\n      <div>\n        <Button\n          onClick={async (ev: any) => {\n            let result = await batchDeleteArticle(this.state.artilceIds)\n            if (result) {\n              this.fetchData()\n            }\n          }}>\n          删除已选内容\n        </Button>\n        <Table rowSelection={rowSelection} columns={columns} dataSource={this.state.articleData} />\n      </div>\n    )\n  }\n}\n\nconst mapState = ({ blogs }: ApplicationState) => {\n  return {\n    data: blogs.data\n  }\n}\n\nconst mapDispatch = {\n  fetchRequest\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(Admin)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { RouteComponentProps, Link } from 'react-router-dom'\nimport { Table, Divider, Button, Spin } from 'antd'\n\n//自己写的组件\nimport { ApplicationState } from '../../store/inex'\nimport { fetchRequest } from '../../store/articles/action'\nimport { batchDeleteArticle } from '../../api/blog'\n\ntype PropFromMap = {\n  data: Blog[]\n}\ntype PropFromDispatch = {\n  fetchRequest: typeof fetchRequest\n}\n\ntype IState = {\n  articleIds: string[]\n  deleteLoading: boolean\n}\ntype ComponentProps = PropFromDispatch & RouteComponentProps & PropFromMap\n\nclass TestAdmin extends Component<ComponentProps, IState> {\n  public columns: any\n  // 第二步 展示数据\n  // 展示数据的格式\n\n  constructor(props: ComponentProps) {\n    super(props)\n    this.state = {\n      articleIds: [],\n      deleteLoading: false\n    }\n    this.columns = [\n      {\n        title: 'title',\n        dataIndex: '_id',\n        key: '_id',\n        render: (text: string, record: blog) => (\n          <Link to={`/blog/${record._id}`}>{record.title}</Link>\n        )\n      },\n      {\n        title: '种类',\n        key: 'category._id',\n        dataIndex: 'category.name'\n      }\n    ]\n  }\n\n  // 第一步加载数据\n  async componentDidMount() {\n    if (!this.props.data && this.props.data.length === 0) {\n      await fetchRequest()\n    }\n  }\n\n  // 第四步删除操作\n  handleClick = async () => {\n    console.log(this.state.deleteLoading)\n    this.setState({\n      deleteLoading: true\n    })\n    // 删除指定的 ID\n    if (this.state.articleIds && this.state.articleIds.length !== 0) {\n      let res = await batchDeleteArticle(this.state.articleIds)\n      /* 服务器返回数据格式\n       * {\n       *   deleteCount:number,\n       *   n:number,\n       *   ok:string\n       * }\n       */\n      // 删除数据成功后更新状态\n      if (res.data) {\n        this.props.fetchRequest()\n        this.setState({\n          articleIds: [],\n          deleteLoading: false\n        })\n      }\n    }\n  }\n\n  render() {\n    const rowSelection = {\n      onChange: (selectedRowKeys, selectedRows) => {\n        // 第三步,把选择的ID 添加到 状态中\n        this.setState({\n          articleIds: selectedRowKeys\n        })\n      },\n      getCheckboxProps: (record) => ({\n        disabled: record.name === 'Disabled User', // Column configuration not to be checked\n        name: record.name\n      })\n    }\n    console.log(this.state.articleIds)\n    return (\n      <div>\n        <Spin spinning={this.state.deleteLoading}>\n          <Table\n            rowSelection={rowSelection}\n            columns={this.columns}\n            dataSource={this.props.data}\n            rowKey={(record: blog) => {\n              return record._id\n            }}\n          />\n          <Button onClick={this.handleClick} loading={this.state.deleteLoading}>\n            删除\n          </Button>\n        </Spin>\n      </div>\n    )\n  }\n}\n\nconst mapState = ({ blogs }: ApplicationState) => {\n  return {\n    data: blogs.data\n  }\n}\n\nconst mapDispatch = {\n  fetchRequest\n}\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(TestAdmin)\n","import React from 'react'\nimport { Route, Switch, Redirect, useLocation } from 'react-router-dom'\nimport { Row, Col } from 'antd'\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\n\n// 自己写的组件\nimport AppHeader from './components/header'\nimport AppSider from './components/sider'\nimport AppHome from './pages/home'\nimport Article from './pages/article'\nimport About from './pages/about'\nimport BlogContent from './pages/article/Blog'\nimport BlogEditor from './pages/article/BlogEditor'\nimport Admin from './pages/admin'\nimport TestAdmin from './pages/admin/test.index'\n\nimport './index.less'\n\nconst Routes: React.SFC = () => {\n  let location = useLocation()\n  return (\n    /*    <Layout>\n      <Header style={{ padding: '0', width: '100%', backgroundColor: 'white' }}>\n        <AppHeader />\n      </Header>\n      <Layout>\n        <Sider theme=\"light\" collapsible={true} collapsedWidth={0} width={400}>\n          <AppSider />\n        </Sider>\n        <Content style={{ minWidth: '640px' }}>\n          <Switch>\n            <Route path=\"/\" />\n          </Switch>\n        </Content>\n      </Layout>\n      <Footer>Footer</Footer>\n    </Layout> */\n    <div>\n      <Row>\n        <Col sm={24} xs={24} md={24} lg={24} xl={24}>\n          <AppHeader />\n        </Col>\n      </Row>\n      <TransitionGroup>\n        <CSSTransition key={location.key} classNames=\"fade\" timeout={600}>\n          <Row>\n            <Col sm={0} xs={0} md={0} lg={8} xl={8}>\n              <AppSider />\n            </Col>\n\n            <Col sm={24} xs={24} md={24} lg={16} xl={16}>\n              <Switch location={location}>\n                <Route path=\"/home\" component={AppHome} />\n                <Route path=\"/article\" component={Article} />\n                <Route path=\"/about\" component={About} />\n                <Route path=\"/blog/:id\" component={BlogContent} />\n                <Route path=\"/editor\" component={BlogEditor} />\n                <Route path=\"/admin\" component={Admin} />\n                <Route path=\"/testadmin\" component={TestAdmin} />\n                <Redirect from=\"\" to=\"/home\" />\n              </Switch>\n            </Col>\n          </Row>\n        </CSSTransition>\n      </TransitionGroup>\n    </div>\n  )\n}\n\nexport default Routes\n","import { createGlobalStyle } from 'styled-components'\n\nexport const Globalstyle = createGlobalStyle`\n  *{\n    box-sizing:border-box;\n  }\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  \n`\n","import React from 'react'\n// 第三方库\nimport { Store } from 'redux'\nimport { History } from 'history'\nimport { ConfigProvider } from 'antd'\nimport { Provider } from 'react-redux'\nimport zhCN from 'antd/es/locale/zh_CN'\nimport { ConnectedRouter } from 'connected-react-router'\n\n// 自己写的文件\nimport Routes from './Routes'\nimport { ApplicationState } from './store/inex'\nimport { Globalstyle } from './style'\n\n// Main 组件的属性\ninterface MainProps {\n  store: Store<ApplicationState>\n  history: History\n}\n\nconst App: React.FC<MainProps> = ({ store, history }) => {\n  return (\n    // 使用 antd 本地化配置\n    <ConfigProvider locale={zhCN}>\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <Globalstyle />\n          <Routes />\n        </ConnectedRouter>\n      </Provider>\n    </ConfigProvider>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects'\nimport { BlogActionTypes } from './types'\nimport { fetchError, fetchSuccess } from './action'\nimport { getArticles } from '../../api/blog'\n\nfunction* getArticle(param: any) {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(getArticles, param.page, param.limit, param.category, param.tag)\n    if (res.error) {\n      yield put(fetchError(res.error))\n    } else {\n      yield put(fetchSuccess(res.data.items))\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack))\n    } else {\n      yield put(fetchError('An unknown error occured.'))\n    }\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchFetchRequest() {\n  yield takeEvery(BlogActionTypes.FETCH_REQUEST, getArticle)\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction* blogsSaga() {\n  yield all([fork(watchFetchRequest)])\n}\n\nexport default blogsSaga\n","import { Reducer } from 'redux'\nimport { BlogState, BlogActionTypes } from './types'\n\n// Type-safe initialState!\nexport const initialState: BlogState = {\n  data: [],\n  errors: undefined,\n  loading: false\n}\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<BlogState> = (state = initialState, action) => {\n  switch (action.type) {\n    case BlogActionTypes.FETCH_REQUEST: {\n      return { ...state, loading: true }\n    }\n    case BlogActionTypes.FETCH_SUCCESS: {\n      return { ...state, loading: false, data: action.payload }\n    }\n    case BlogActionTypes.FETCH_ERROR: {\n      return { ...state, loading: false, errors: action.payload }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as blogReducer }\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects'\nimport { categoryActionTypes } from './types'\nimport { fetchError, fetchSuccess } from './action'\nimport { getCategories } from '../../api/blog'\n\nfunction* getCategory() {\n  try {\n    // To call async functions, use redux-saga's `call()`.\n    const res = yield call(getCategories)\n    if (res.error) {\n      yield put(fetchError(res.error))\n    } else {\n      console.log(res.data)\n      yield put(fetchSuccess(res.data))\n    }\n  } catch (err) {\n    if (err instanceof Error && err.stack) {\n      yield put(fetchError(err.stack))\n    } else {\n      yield put(fetchError('An unknown error occured.'))\n    }\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchFetchRequest() {\n  yield takeEvery(categoryActionTypes.FETCH_REQUEST, getCategory)\n}\n\n// We can also use `fork()` here to split our saga into multiple watchers.\nfunction* categorySaga() {\n  yield all([fork(watchFetchRequest)])\n}\n\nexport default categorySaga\n","import { Reducer } from 'redux'\nimport { CategoryState, categoryActionTypes } from './types'\n\n// Type-safe initialState!\nexport const initialState: CategoryState = {\n  data: [],\n  errors: undefined,\n  loading: false\n}\n\n// Thanks to Redux 4's much simpler typings, we can take away a lot of typings on the reducer side,\n// everything will remain type-safe.\nconst reducer: Reducer<CategoryState> = (state = initialState, action) => {\n  switch (action.type) {\n    case categoryActionTypes.FETCH_REQUEST: {\n      return { ...state, loading: true }\n    }\n    case categoryActionTypes.FETCH_SUCCESS: {\n      return { ...state, loading: false, data: action.payload }\n    }\n    case categoryActionTypes.FETCH_ERROR: {\n      return { ...state, loading: false, errors: action.payload }\n    }\n    default: {\n      return state\n    }\n  }\n}\n\n// Instead of using default export, we use named exports. That way we can group these exports\n// inside the `index.js` folder.\nexport { reducer as categoryReducer }\n","import { Reducer } from 'redux'\nimport { UserState, USER_LOGIN_ACTION, UserAction, USER_LOGOUT_ACTION } from './types'\n\nconst initialState: UserState = {\n  login: false\n}\n\nconst reducer: Reducer<UserState, UserAction> = (state = initialState, action) => {\n  switch (action.type) {\n    case USER_LOGIN_ACTION: {\n      return { ...state, login: true }\n    }\n    case USER_LOGOUT_ACTION: {\n      return { ...state, login: false }\n    }\n    default:\n      return state\n  }\n}\n\nexport { reducer as userReducer }\n","import { combineReducers } from 'redux'\nimport { all, fork } from 'redux-saga/effects'\nimport { connectRouter, RouterState } from 'connected-react-router'\nimport { History } from 'history'\n\nimport blogsSaga from './articles/sagas'\nimport { blogReducer } from './articles/reducer'\nimport { BlogState } from './articles/types'\nimport categorySaga from './category/sagas'\nimport { categoryReducer } from './category/reducer'\nimport { CategoryState } from './category/types'\nimport { userReducer } from './user/reducer'\nimport { UserState } from './user/types'\n\nexport interface ApplicationState {\n  blogs: BlogState\n  router: RouterState\n  user: UserState\n  category: CategoryState\n}\n\nexport const createRootReducer = (history: History) =>\n  combineReducers({\n    user: userReducer,\n    blogs: blogReducer,\n    category: categoryReducer,\n    router: connectRouter(history)\n  })\n\nexport function* rootSaga() {\n  yield all([fork(blogsSaga), fork(categorySaga)])\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport configureStore from './configStore'\nimport { createBrowserHistory } from 'history'\n\nimport 'antd/dist/antd.css' // or 'antd/dist/antd.less'\n\nconst initialState = window.INITIAL_REDUX_STATE\nconst history = createBrowserHistory()\nconst store = configureStore(history, initialState)\n\nReactDOM.render(<App store={store} history={history} />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { Store, createStore, applyMiddleware } from 'redux'\nimport createSagaMiddleware from 'redux-saga'\n\n// 使用 redux 管理导航连接\nimport { routerMiddleware } from 'connected-react-router'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { History } from 'history'\nimport { ApplicationState, createRootReducer, rootSaga } from './store/inex'\n\nexport default function configureStore(\n  history: History,\n  initialState: ApplicationState\n): Store<ApplicationState> {\n  const composeEnhancers = composeWithDevTools({})\n\n  const sagaMiddleware = createSagaMiddleware()\n\n  const store = createStore(\n    createRootReducer(history),\n    initialState,\n    composeEnhancers(applyMiddleware(routerMiddleware(history), sagaMiddleware))\n  )\n\n  sagaMiddleware.run(rootSaga)\n  return store\n}\n"],"sourceRoot":""}